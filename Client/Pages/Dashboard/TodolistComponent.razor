@inject ILocalStorageService LocalStorage
@inject PersistentComponentState ApplicationState
@using Client.Models
@using Client.Utils
@inject HttpClient Http

<form class="mx-auto my-7 flex max-w-[92vw] flex-row justify-center text-left outline-none md:w-[850px]"
    @onsubmit:preventDefault="true"
    @onsubmit="HandleSubmit">
    <input class="mx-1 my-0 box-border rounded-md border-none px-7 py-2 text-left outline-none sm:min-w-[310px]"
            name="title"
            type="text"
            placeholder="Enter Title"
            @bind="@Title"
            @oninput="@((e) => {Title=(string)e.Value!;})" />

    <input class="mx-1 my-0 box-border rounded-md border-none px-4 py-2 text-left outline-none sm:w-[450px]"
            name="description"
            type="text"
            placeholder="Enter Description"
            @bind="@Description"
            @oninput="@((e) => {Description=(string)e.Value!;})" />

    <button class=" mx-1 my-0 rounded-md border-none bg-[#49ff58] px-6 py-3"
            type="submit">
        Add
    </button>
</form>

<div class="m-auto mt-[55px] flex max-w-[68vw] flex-wrap rounded-md p-[15px]">
    @if (Todolists != null)
        @foreach (var (todo, index) in Todolists.Select((item, index) => (item, index)))
        {
        <div class="m-[5px] flex justify-between rounded-lg bg-[#ffe4c4] text-left" style="flex: 1 0 40%">
            <div class="ml-6 px-0 py-[15px]">
                <div class="@(todo.isFinished == true ? "line-through" : "") mb-2 text-lg font-bold capitalize text-black">
                    @todo.title
                </div>

                <div class="@(todo.isFinished == true ? "line-through" : "") text-black">
                    @todo.description
                </div>
            </div>

            <div class="box-border flex h-full flex-col justify-around gap-2 px-[10x] py-[15px]"
                    style="border-left: 1px solid #8b8b8b;">
                <button class="mx-4 my-0 flex cursor-pointer rounded border-none bg-white p-2 align-middle text-[#27ce4b] outline-none hover:bg-[#27ce4b] hover:text-white"
                        @onclick:preventDefault="true"
                        @onclick="@(() => {HandleFinished(@index, @todo.id, @todo.isFinished);})">
                    <svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path fill="none" d="M0 0h24v24H0z"></path><path d="M18 7l-1.41-1.41-6.34 6.34 1.41 1.41L18 7zm4.24-1.41L11.66 16.17 7.48 12l-1.41 1.41L11.66 19l12-12-1.42-1.41zM.41 13.41L6 19l1.41-1.41L1.83 12 .41 13.41z"></path></svg>
                </button>

                <button class="mx-4 my-0 flex cursor-pointer rounded border-none bg-white p-2 align-middle text-blue-500 outline-none hover:bg-blue-500 hover:text-white">
                    <svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path d="m16 2.012 3 3L16.713 7.3l-3-3zM4 14v3h3l8.299-8.287-3-3zm0 6h16v2H4z"></path></svg>
                </button>

                <button class="mx-4 my-0 flex cursor-pointer rounded border-none bg-white p-2 align-middle text-red-600 outline-none hover:bg-[#ce2727] hover:text-white"
                        @onclick:preventDefault="true"
                        @onclick="@(() => {HandleRemove(@index, @todo.id);})">
                    <svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 24 24" height="18" width="18" xmlns="http://www.w3.org/2000/svg"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"></path></svg>
                </button>

            </div>
        </div>
        }
</div>

@code {
    private string? Title { get; set; }
    private string? Description { get; set; }
    private List<Todolist>? Todolists { get; set; }
    private PersistingComponentStateSubscription _persistingSubscription;

    private Task PersistTodo()
    {
        ApplicationState.PersistAsJson("todoData", Todolists);
        return Task.CompletedTask;
    }

    private async void HandleSubmit()
    {
        var newTodo = new TodolistRequest()
        {
            title = Title,
            description = Description,
            isFinished = false,
        };
        var content = new StringContent(JsonSerializer.Serialize(newTodo), System.Text.Encoding.UTF8, "application/json");
        var request = new HttpRequestMessage
        {
            Method = HttpMethod.Post,
            RequestUri = new Uri($"http://localhost:5227/api/todo/addTodo"),
            Content = content
        };
        using var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            Title = string.Empty;
            Description = string.Empty;
            string responseData = await response.Content.ReadAsStringAsync();
            var responseObj = JsonSerializer.Deserialize<Todolist?>(responseData);
            response.Dispose();
            Todolists ??= new List<Todolist>();
            if (responseObj != null)
            {
                Todolists.Add(responseObj);
                StateHasChanged();
            }
        }
    }

    private async void HandleFinished(int index, int? id=0, bool? isFinished=false)
    {
        if (Todolists != null)
        {
            var jsonData = new
            {
                id = id!.Value,
                isFinished = !isFinished!.Value
            };
            var content = new StringContent(JsonSerializer.Serialize(jsonData), System.Text.Encoding.UTF8, "application/json");
            var request = new HttpRequestMessage
            {
                Method = HttpMethod.Post,
                RequestUri = new Uri($"http://localhost:5227/api/todo/editTodo"),
                Content = content
            };

            using HttpResponseMessage response = await Http.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                response.Dispose();
                Todolists[index].isFinished = jsonData.isFinished;
                StateHasChanged();
            }
        }
    }

    private async void HandleRemove(int index, int? id=0)
    {
        var content = new StringContent(JsonSerializer.Serialize(id!.Value), System.Text.Encoding.UTF8, "application/json");

        var request = new HttpRequestMessage
        {
            Method = HttpMethod.Delete,
            RequestUri = new Uri($"http://localhost:5227/api/todo/removeTodo"),
            Content = content
        };

        using var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            response.Dispose();
            Todolists?.RemoveAt(index);
            StateHasChanged();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
       
            _persistingSubscription = ApplicationState.RegisterOnPersisting(PersistTodo);
            if (ApplicationState.TryTakeFromJson<List<Todolist>?>("todoData", out var todolists))
            {
                    Todolists = todolists;
                    StateHasChanged();
            }
            else
            { 
                    var request = new HttpRequestMessage
                    {
                        Method = HttpMethod.Get,
                        RequestUri = new Uri($"http://localhost:5227/api/todo/getTodo"),
                    };
                    request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                
                    using (var response = await Http.SendAsync(request))
                    {
                        response.EnsureSuccessStatusCode();
                        await using (var stream = await response.Content.ReadAsStreamAsync())
                        {
                            var responseObj = await JsonSerializer.DeserializeAsync<List<Todolist>?>(stream);
                            Todolists = responseObj;
                            StateHasChanged();
                        }
                    }
        }
    }

    public void Dispose()
    {
        _persistingSubscription.Dispose();
    }

}